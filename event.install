<?php

/**
 * @file
 * Event schema for the event module.
 */

/**
* Implements hook_schema().
*/
function event_schema() {
  $schema['event'] = array(
    'description' => 'The base table for events.',
    'fields' => array(
      'event_id' => array(
        'description' => 'The primary identifier for an event.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {event_type}.type of this event.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of the event.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the event coordinator.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'Information about the event.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'sports_club' => array(
        'description' => 'Sports club event applies to.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => "At large",
      ),
      'location_building' => array(
        'description' => 'The location of the event.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'location_street' => array(
        'description' => 'The street address of the event.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'location_city' => array(
        'description' => 'The city where event occurs.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'location_state' => array(
        'description' => 'The state where event occurs.',
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => 'TN',
      ),
      'location_zip' => array(
        'description' => 'The zip code where event occurs.',
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        'default' => '',
      ),
      'stime' => array(
        'description' => 'The start time of the event.',
        'mysql_type' => 'datetime',
        'not null' => TRUE,
        'default' => date('Y-m-d H:i:00'),
      ),
      'etime' => array(
        'description' => 'The end time of the event.',
        'mysql_type' => 'datetime',
        'not null' => TRUE,
        'default' => date('Y-m-d H:i:00'),
      ),
      'phours' => array(
        'description' => 'Number of program hours.',
        'mysql_type' => 'time',
        'not null' => TRUE,
        'default' => '00:00:00',
      ),
      'ptime' => array(
        'description' => 'Amount of planning time.',
        'mysql_type' => 'time',
        'not null' => TRUE,
        'default' => '00:00:00',
      ),
      'nstaff' => array(
        'description' => 'Number of staff involved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'shours' => array(
        'description' => 'Number of staff hours.',
        'mysql_type' => 'time',
        'not null' => TRUE,
        'default' => '00:00:00',
      ),
      'attendance' => array(
        'description' => 'Total event attendance.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the node was created.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the node was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'event_changed' => array('changed'),
      'event_created' => array('created'),
      'coord_uid' => array('uid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'type' => array(
        'table' => 'event_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('event_id'),
  );
  
  $schema['event_type'] = array(
    'description' => 'Table for event types.',
    'fields' => array(
      'event_type_id' => array(
        'description' => 'The primary identifier for an event type.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine-readable name of this event type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this event type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'The weight of this event type in relation to others.',
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'unique keys' => array(
      'type' => array('type'),
     ),
    'primary key' => array('event_type_id'),
  );
  return $schema;
}